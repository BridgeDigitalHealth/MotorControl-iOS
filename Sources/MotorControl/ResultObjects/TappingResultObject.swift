//
//  TappingResultObject.swift
//
//  Copyright Â© 2022 Sage Bionetworks. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1.  Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2.  Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.
//
// 3.  Neither the name of the copyright holder(s) nor the names of any contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission. No license is granted to the trademarks of
// the copyright holders even if such marks are included in this software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

import Foundation
import SwiftUI
import JsonModel
import ResultModel
import MobilePassiveData

extension SerializableResultType {
    
    /// The type identifier for a tapping result.
    public static let tapping: SerializableResultType = "tapping"
}

/// The `TappingResultObject` records the results of a tapping interval test.
///
/// The tapping interval result object records an array of touch samples (one for each tap) and also the
/// geometry of the task at the time it was displayed. You can use the information in the object for reference
/// in interpreting the touch samples.
///
/// A tapping interval sample is typically generated by the framework as the task proceeds. When the task
/// completes, it may be appropriate to serialize it for transmission to a server,
/// or to immediately perform analysis on it.
public struct TappingResultObject : SerializableResultData, ResultData {
    private enum CodingKeys : String, OrderedEnumCodingKey {
        case serializableType = "type", identifier, hand, startDate, endDate, viewSize, buttonRectLeft, buttonRectRight, tapCount, samples
    }

    /// The identifier for the associated step.
    public let identifier: String

    /// Default = `.tapping`.
    public private(set) var serializableType: SerializableResultType = .tapping
    
    /// Timestamp date for when the step was started.
    public var startDate: Date = Date()
    
    /// Timestamp date for when the step was ended.
    public var endDate: Date = Date()
    
    /// Which hand the result is for.
    public internal(set) var hand: HandSelection?

    /// An array of collected tapping samples.
    public internal(set) var samples: [TappingSample] = []
    
    /// The tap count of hits that were within the buttons.
    public internal(set) var tapCount: Int = 0

    /// The size of the bounds of the step view containing the tap targets.
    public internal(set) var stepViewSize: CGSize {
        get { viewSize.toSize() }
        set { viewSize = .init(size: newValue) }
    }
    private var viewSize: GeometryPoint = .init(size: .zero)

    /// The frame of the left button, in points, relative to the step view bounds.
    public internal(set) var buttonRect1: CGRect {
        get { buttonRectLeft.toRect() }
        set { buttonRectLeft = .init(rect: newValue) }
    }
    private var buttonRectLeft: GeometryRect = .init(rect: .zero)
    
    /// The frame of the right button, in points, relative to the step view bounds.
    public internal(set) var buttonRect2: CGRect {
        get { buttonRectRight.toRect() }
        set { buttonRectRight = .init(rect: newValue) }
    }
    private var buttonRectRight: GeometryRect = .init(rect: .zero)
    
    init(identifier: String) {
        self.identifier = identifier
    }
    
    public init() {
        self.identifier = "tapping"
    }
    
    public func deepCopy() -> TappingResultObject {
        self
    }
}

extension TappingResultObject : FileArchivable {
    
    public func buildArchivableFileData(at stepPath: String?) throws -> (fileInfo: FileInfo, data: Data)? {
        let data = try self.jsonEncodedData()
        return (fileInfo(stepPath), data)
    }
    
    private func fileInfo(_ stepPath: String?) -> FileInfo {
        
        // The filename should include the section (left/right).
        let whichHand = hand ?? stepPath?.components(separatedBy: "/").compactMap { HandSelection(rawValue: $0) }.first
        let filename = whichHand.map { "\($0.rawValue)_\(identifier)" } ?? identifier
        
        return .init(filename: filename,
                     timestamp: startDate,
                     contentType: "application/json",
                     identifier: identifier,
                     stepPath: stepPath,
                     jsonSchema: jsonSchema)
    }
}

struct GeometryPoint : Codable {
    let x: CGFloat
    let y: CGFloat
    
    init(point: CGPoint) {
        self.x = point.x
        self.y = point.y
    }
    
    func toPoint() -> CGPoint {
        .init(x: x, y: y)
    }
    
    init(size: CGSize) {
        self.x = size.width
        self.y = size.height
    }
    
    func toSize() -> CGSize {
        .init(width: x, height: y)
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        let split = stringValue.dropFirst().dropLast().split(separator: ",")
        guard split.count == 2 else {
            throw DecodingError.dataCorrupted(.init(codingPath: decoder.codingPath, debugDescription:
                                                        "\(stringValue) does not match expected pattern of '{x,y}'"))
        }
        guard let x = Double(split.first!.trimmingCharacters(in: .whitespaces)),
              let y = Double(split.last!.trimmingCharacters(in: .whitespaces))
        else {
            throw DecodingError.dataCorrupted(.init(codingPath: decoder.codingPath, debugDescription:
                                                        "\(stringValue) does not match expected pattern of '{x,y}'"))
        }
        self.x = x
        self.y = y
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode("{\(self.x), \(self.y)}")
    }
}

struct GeometryRect : Codable {
    let origin: GeometryPoint
    let size: GeometryPoint
    
    init(rect: CGRect) {
        self.origin = .init(point: rect.origin)
        self.size = .init(size: rect.size)
    }
    
    func toRect() -> CGRect {
        .init(origin: origin.toPoint(), size: size.toSize())
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        let split = stringValue.dropFirst().dropLast().split(separator: ",")
        guard split.count == 4 else {
            throw DecodingError.dataCorrupted(.init(codingPath: decoder.codingPath, debugDescription:
                                                        "\(stringValue) does not match expected pattern of '{{x, y}, {w, h}}'"))
        }
        guard let x = Double(split[0].trimmingCharacters(in: .whitespaces).dropFirst()),
              let y = Double(split[1].trimmingCharacters(in: .whitespaces).dropLast()),
              let w = Double(split[2].trimmingCharacters(in: .whitespaces).dropFirst()),
              let h = Double(split[3].trimmingCharacters(in: .whitespaces).dropLast())
        else {
            throw DecodingError.dataCorrupted(.init(codingPath: decoder.codingPath, debugDescription:
                                                        "\(stringValue) does not match expected pattern of '{{x, y}, {w, h}}'"))
        }
        self.origin = .init(point: .init(x: x, y: y))
        self.size = .init(size: .init(width: w, height: h))
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode("{{\(self.origin.x), \(self.origin.y)}, {\(self.size.x), \(self.size.y)}}")
    }
}

/// Values that identify the button that was tapped in a tapping sample.
public enum TappingButtonIdentifier : String, Codable, StringEnumSet, DocumentableStringEnum {
    case left, right, none
}

/// The `TappingSample` class represents a single tap on a button.
///
/// The tapping sample object records the location of the tap, the
/// button that was tapped, and the time at which the event occurred. A tapping sample is
/// included in an `TappingResultObject` object, and is recorded by the
/// step view controller for the corresponding task when a tap is
/// recognized.
///
/// A tapping sample is typically generated by the framework as the task proceeds. When the task
/// completes, it may be appropriate to serialize the sample for transmission to a server,
/// or to immediately perform analysis on it.
public struct TappingSample : SampleRecord, Codable, Equatable {
    private enum CodingKeys : String, CodingKey, CaseIterable {
        case stepPath, timestamp, uptime, buttonIdentifier, location, duration
    }
    
    /// System clock time for the sample. This will be the same timestamp marker across different files.
    public let uptime: TimeInterval
    
    /// A relative timestamp indicating the time of the tap event.
    ///
    /// The timestamp is relative to the value of `startDate` in the `RSDResult` object that includes this
    /// sample.
    public let timestamp: TimeInterval?
    
    /// The current step path.
    public let stepPath: String

    /// An enumerated value that indicates which button was tapped, if any.
    ///
    /// If the value of this property is `.none`, it indicates that the tap was near, but not inside, one
    /// of the target buttons.
    public let buttonIdentifier: TappingButtonIdentifier

    /// The location of the tap within the step's view.
    ///
    /// The location coordinates are relative to a rectangle whose size corresponds to
    /// the `stepViewSize` in the enclosing `TappingResultObject` object.
    public let location: CGPoint
    
    /// A duration of the tap event.
    ///
    /// The time interval (in seconds) between touch down and touch release events.
    public internal(set) var duration: TimeInterval
    
    /// Ignored.
    public var timestampDate: Date? {
        return nil
    }
}

extension TappingResultObject : DocumentableStruct {

    public static func codingKeys() -> [CodingKey] {
        CodingKeys.allCases
    }
    
    public static func isRequired(_ codingKey: CodingKey) -> Bool {
        guard let key = codingKey as? CodingKeys else { return false }
        let requiredKeys: [CodingKeys] = [.identifier, .serializableType, .startDate]
        return requiredKeys.contains(key)
    }
    
    public static func documentProperty(for codingKey: CodingKey) throws -> DocumentProperty {
        guard let key = codingKey as? CodingKeys else {
            throw DocumentableError.invalidCodingKey(codingKey, "\(codingKey) is not recognized for this class")
        }
        switch key {
        case .serializableType:
            return .init(constValue: SerializableResultType.tapping)
        case .identifier:
            return .init(propertyType: .primitive(.string))
        case .hand:
            return .init(propertyType: .reference(HandSelection.documentableType()), propertyDescription:
                            "Which hand was used for this section.")
        case .startDate, .endDate:
            return .init(propertyType: .format(.dateTime))
        case .viewSize:
            return .init(propertyType: .primitive(.string), propertyDescription:
                            "The size of the bounds of the step view containing the tap targets.")
        case .buttonRectLeft, .buttonRectRight:
            return .init(propertyType: .primitive(.string), propertyDescription:
                            "The frame of the buttons relative to the step view bounds.")
        case .tapCount:
            return .init(propertyType: .primitive(.integer), propertyDescription:
                            "The tap count of hits that were within the buttons.")
        case .samples:
            return .init(propertyType: .referenceArray(TappingSample.documentableType()), propertyDescription:
                            "An array of collected tapping samples.")
            
        }
    }
    
    public static func examples() -> [TappingResultObject] {
        var result = TappingResultObject()
        result.buttonRect1 = .init(x: 60, y: 500, width: 40, height: 40)
        result.buttonRect2 = .init(x: 160, y: 500, width: 40, height: 40)
        result.stepViewSize = .init(width: 320, height: 640)
        result.samples = TappingSample.examples()
        result.tapCount = 1
        return [result]
    }
}

extension TappingResultObject : DocumentableRootObject {
    public var jsonSchema: URL {
        .init(string: "TappingResultObject.json", relativeTo: kSageJsonSchemaBaseURL)!
    }
    
    public var documentDescription: String? {
        "The `TappingResultObject` records the results of a tapping interval test."
    }
}

extension TappingSample : DocumentableStruct {
    public static func codingKeys() -> [CodingKey] {
        CodingKeys.allCases
    }
    
    public static func isRequired(_ codingKey: CodingKey) -> Bool {
        guard let key = codingKey as? CodingKeys else { return false }
        return key != .timestamp
    }
    
    public static func documentProperty(for codingKey: CodingKey) throws -> DocumentProperty {
        guard let key = codingKey as? CodingKeys else {
            throw DocumentableError.invalidCodingKey(codingKey, "\(codingKey) is not recognized for this class")
        }
        switch key {
        case .stepPath:
            return .init(propertyType: .primitive(.string), propertyDescription:
                            "The current step path.")
        case .timestamp:
            return .init(propertyType: .primitive(.number), propertyDescription:
                            "A relative timestamp indicating the time of the tap event where `.zero` is the start of the recording.")
        case .uptime:
            return .init(propertyType: .primitive(.number), propertyDescription:
                            "System clock time for the sample. This will be the same timestamp marker across different files.")
        case .buttonIdentifier:
            return .init(propertyType: .reference(TappingButtonIdentifier.documentableType()), propertyDescription:
                            "An enumerated value that indicates which button was tapped, if any.")
        case .duration:
            return .init(propertyType: .primitive(.number), propertyDescription:
                            "The time interval (in seconds) between touch down and touch release events.")
        case .location:
            return .init(propertyType: .primitiveArray(.number), propertyDescription:
                            "The (x,y) coordinates on the screen of the touch point.")
        }
    }
    
    public static func examples() -> [TappingSample] {
        [.init(uptime: 1628847,
               timestamp: 0,
               stepPath: "foo",
               buttonIdentifier: .right,
               location: .init(x: 60, y: 500),
               duration: 0.2)]
    }
}

